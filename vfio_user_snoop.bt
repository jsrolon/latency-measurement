#!/usr/bin/env bpftrace
/*
 * undump	Trace unix domain socket package receive.
 *		For Linux, uses bpftrace and eBPF.
 *
 * Also a basic example of bpftrace.
 *
 * This is a bpftrace version of the bcc examples/tracing of the same name.
 *
 * USAGE: undump.bt
 *
 * Copyright 2022 CESTC, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License")
 *
 * 22-May-2022	Rong Tao	Created this.
 */
#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#endif

struct vfio_user_header {
    uint16_t    msg_id;
    uint16_t    cmd;
    uint32_t    msg_size;
	uint32_t	flags;
	uint32_t	error;
};

struct vfio_user_packet_irq {
    struct vfio_user_header header;
	uint32_t				argsz;
	uint32_t				flags;
	uint32_t				index;
	uint32_t				start;
	uint32_t				count;
	void*					data;
};

struct vfio_user_packet_rw {
	struct vfio_user_header header;
	uint64_t				offset;
	uint32_t				region;
	uint32_t				count;
	void* 					data;
};

BEGIN
{
	@qemu_pid = (uint64)$1;
	@vfio_user_socket_fd = $2;
	printf("Will print packet averages on exit...\n");
}

// field:int __syscall_nr; offset:8;       size:4; signed:1;
// field:int fd;   offset:16;      size:8; signed:0;
// field:struct user_msghdr * msg; offset:24;      size:8; signed:0;
// field:unsigned int flags;       offset:32;      size:8; signed:0;
tracepoint:syscalls:sys_enter_sendmsg
/ pid == @qemu_pid /
{
	$enter_sendmsg_timestamp = nsecs;
	
	$fd = args->fd;
	if ($fd == @vfio_user_socket_fd) {
		$vfio_user_msg_iov = ((struct iovec *)args->msg->msg_iov)[0];
		$vfio_user_header = (struct vfio_user_header *)$vfio_user_msg_iov.iov_base;
		
		@before[$vfio_user_header->msg_id] = 0;
		
		$cmd = $vfio_user_header->cmd;
		if($cmd == 8) {
			@time_irq[$vfio_user_header->msg_id] = $enter_sendmsg_timestamp;
		}

		if($cmd == 9) {
			@time_reads[$vfio_user_header->msg_id] = $enter_sendmsg_timestamp;
		}

		if($cmd == 10) {
			@time_writes[$vfio_user_header->msg_id] = $enter_sendmsg_timestamp;
		}
	}
}

// field:int __syscall_nr; offset:8;       size:4; signed:1;
// field:int fd;   offset:16;      size:8; signed:0;
// field:struct user_msghdr * msg; offset:24;      size:8; signed:0;
// field:unsigned int flags;       offset:32;      size:8; signed:0;
tracepoint:syscalls:sys_enter_recvmsg
/ pid == @qemu_pid /
{
	$enter_recvmsg_timestamp = nsecs;

	$fd = args->fd;
	if ($fd == @vfio_user_socket_fd) {
		$vfio_user_msg_iov = ((struct iovec *)args->msg->msg_iov)[0];
		$vfio_user_header = (struct vfio_user_header *)$vfio_user_msg_iov.iov_base;

		$id = $vfio_user_header->msg_id;
		if(@before[$id] == 1) {
			$cmd = $vfio_user_header->cmd;
			if($cmd == 8) {
				if(@time_irq[$id] > 0) {
					//printf("%x - %x\n", $enter_recvmsg_timestamp, @time_irq[$id]);
					$elapsed = $enter_recvmsg_timestamp - @time_irq[$id];

					@irq_avg = avg($elapsed);
					@irq_min = min($elapsed);
					@irq_max = max($elapsed);
				}
			}

			if($cmd == 9) {
				if(@time_reads[$id] > 0) {
					//printf("%x - %x\n", $enter_recvmsg_timestamp, @time_reads[$id]);
					$elapsed = $enter_recvmsg_timestamp - @time_reads[$id];

					@reads_avg = avg($elapsed);
					@reads_min = min($elapsed);
					@reads_max = max($elapsed);
				}
			}

			if($cmd == 10) {
				if(@time_writes[$id] > 0) {
					//printf("%x - %x\n", $enter_recvmsg_timestamp, @time_writes[$id]);
					$elapsed = $enter_recvmsg_timestamp - @time_writes[$id];

					@writes_avg = avg($elapsed);
					@writes_min = min($elapsed);
					@writes_max = max($elapsed);
				}
			}
		} else {
			@before[$id]++;
		}
	}
}

END
{
	clear(@qemu_pid);
	clear(@vfio_user_socket_fd);

	clear(@before);

	// even though we do the deletes above, sometimes a dangling write ends up here
	clear(@time_irq);
	clear(@time_reads);
	clear(@time_writes);
}
